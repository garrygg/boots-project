package gg.config;

import java.util.Arrays;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.alibaba.druid.pool.DruidDataSource;
import com.alibaba.druid.support.http.StatViewServlet;
import com.alibaba.druid.support.http.WebStatFilter;
import com.google.common.collect.Maps;

/**
 * 自定义Druid数据源 参数配置 
 如使用druid-spring-boot-starter则需无需配置
 */
@Configuration
public class DruidConfiguration {

	// 将设置参数的druid的数据源注册到IOC容器中
	@ConfigurationProperties(prefix = "spring.datasource")
	@Bean
	public DataSource druid() {
		return new DruidDataSource();
	}

	// 配置Druid监控
	// 1.配置管理后台的Servlet
	@Bean
	public ServletRegistrationBean statViewServlet() {
		ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(),
				"/druid/*");
		Map<String, String> initParams = Maps.newHashMap();
		initParams.put("loginUsername", "root");// 登录后台时的用户名
		initParams.put("loginPassword", "root");// 登录后台时的密码
		initParams.put("allow", "");// 默认就是允许所有的访问
		initParams.put("deny", "");// 拒绝
		servletRegistrationBean.setInitParameters(initParams);
		return servletRegistrationBean;

	}

	// 2.配置一个web监控的过滤器
    @Bean
	public FilterRegistrationBean webStatFilter() {
		FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();
		filterRegistrationBean.setFilter(new WebStatFilter());
		Map<String, String> initParams = Maps.newHashMap();
		initParams.put("exclusions", "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*");// 不拦截的请求
		filterRegistrationBean.setInitParameters(initParams);
		filterRegistrationBean.setUrlPatterns(Arrays.asList("/*"));
		return filterRegistrationBean;
	}

}
